From da5b5f5a5aef933fcd84fb044035b09022fbdcbd Mon Sep 17 00:00:00 2001
From: Md Arif <111168803+sabamdarif@users.noreply.github.com>
Date: Thu, 26 Jun 2025 09:50:55 +0530
Subject: [PATCH] ksu manual hooks

---
 drivers/input/input.c |  9 +++++++++
 fs/exec.c             | 13 +++++++++++++
 fs/open.c             |  8 +++++++-
 fs/read_write.c       |  9 +++++++++
 fs/stat.c             |  7 +++++++
 5 files changed, 45 insertions(+), 1 deletion(-)

diff --git a/drivers/input/input.c b/drivers/input/input.c
index 70ffffea3e58..8b08c30cc39f 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -378,10 +378,19 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+#ifdef CONFIG_KSU
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
+    #ifdef CONFIG_KSU
+    if (unlikely(ksu_input_hook))
+        ksu_handle_input_handle_event(&type, &code, &value);
+    #endif
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
diff --git a/fs/exec.c b/fs/exec.c
index 7fe8cf43f795..464e934e7a82 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1896,11 +1896,24 @@ static int __do_execve_file(int fd, struct filename *filename,
 	return retval;
 }
 
+#ifdef CONFIG_KSU
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
+#endif
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
 			      int flags)
 {
+    #ifdef CONFIG_KSU
+    if (unlikely(ksu_execveat_hook))
+        ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+    else
+        ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
+    #endif
 	return __do_execve_file(fd, filename, argv, envp, flags, NULL);
 }
 
diff --git a/fs/open.c b/fs/open.c
index 155731594c8e..bc5ebe986ee6 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -348,6 +348,10 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
+#ifdef CONFIG_KSU
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
+#endif
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -362,7 +366,9 @@ long do_faccessat(int dfd, const char __user *filename, int mode)
 	struct vfsmount *mnt;
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
-
+    #ifdef CONFIG_KSU
+    ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+    #endif
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
diff --git a/fs/read_write.c b/fs/read_write.c
index 650fc7e0f3a6..6ed6e8e8e831 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -434,9 +434,18 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL(kernel_read);
 
+#ifdef CONFIG_KSU
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+           size_t *count_ptr, loff_t **pos);
+#endif
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
+    #ifdef CONFIG_KSU
+    if (unlikely(ksu_vfs_read_hook))
+        ksu_handle_vfs_read(&file, &buf, &count, &pos);
+    #endif
 
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
diff --git a/fs/stat.c b/fs/stat.c
index 376543199b5a..dcc03902e7c8 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -148,6 +148,10 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 }
 EXPORT_SYMBOL(vfs_statx_fd);
 
+#ifdef CONFIG_KSU
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+#endif
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -170,6 +174,9 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 	int error = -EINVAL;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT;
 
+    #ifdef CONFIG_KSU
+    ksu_handle_stat(&dfd, &filename, &flags);
+    #endif
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		       AT_EMPTY_PATH | KSTAT_QUERY_FLAGS)) != 0)
 		return -EINVAL;
-- 
2.49.0

